# Generated from Lang.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from LangParser import LangParser


def serializedATN():
    return [
        4,0,48,396,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,
        1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,
        1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,
        1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,3,33,304,8,33,1,34,1,34,5,34,308,8,
        34,10,34,12,34,311,9,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,3,35,324,8,35,1,36,1,36,5,36,328,8,36,10,36,12,36,
        331,9,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,4,38,341,8,38,11,
        38,12,38,342,1,39,4,39,346,8,39,11,39,12,39,347,1,39,1,39,4,39,352,
        8,39,11,39,12,39,353,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,
        1,43,1,43,1,44,1,44,1,44,1,45,3,45,371,8,45,1,45,1,45,5,45,375,8,
        45,10,45,12,45,378,9,45,1,45,1,45,1,46,4,46,383,8,46,11,46,12,46,
        384,1,46,1,46,1,47,1,47,3,47,391,8,47,1,47,1,47,1,47,1,47,0,0,48,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
        93,47,95,48,1,0,6,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,1,0,48,57,8,0,33,33,37,37,42,43,45,47,58,58,
        60,62,95,95,124,124,1,0,32,32,419,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
        0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
        0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,
        0,0,1,97,1,0,0,0,3,101,1,0,0,0,5,104,1,0,0,0,7,106,1,0,0,0,9,113,
        1,0,0,0,11,117,1,0,0,0,13,123,1,0,0,0,15,128,1,0,0,0,17,133,1,0,
        0,0,19,139,1,0,0,0,21,148,1,0,0,0,23,150,1,0,0,0,25,152,1,0,0,0,
        27,154,1,0,0,0,29,156,1,0,0,0,31,158,1,0,0,0,33,161,1,0,0,0,35,164,
        1,0,0,0,37,166,1,0,0,0,39,168,1,0,0,0,41,171,1,0,0,0,43,174,1,0,
        0,0,45,177,1,0,0,0,47,180,1,0,0,0,49,184,1,0,0,0,51,187,1,0,0,0,
        53,191,1,0,0,0,55,193,1,0,0,0,57,195,1,0,0,0,59,223,1,0,0,0,61,226,
        1,0,0,0,63,231,1,0,0,0,65,236,1,0,0,0,67,303,1,0,0,0,69,305,1,0,
        0,0,71,323,1,0,0,0,73,325,1,0,0,0,75,332,1,0,0,0,77,340,1,0,0,0,
        79,345,1,0,0,0,81,355,1,0,0,0,83,357,1,0,0,0,85,360,1,0,0,0,87,363,
        1,0,0,0,89,366,1,0,0,0,91,370,1,0,0,0,93,382,1,0,0,0,95,388,1,0,
        0,0,97,98,5,100,0,0,98,99,5,101,0,0,99,100,5,102,0,0,100,2,1,0,0,
        0,101,102,5,45,0,0,102,103,5,62,0,0,103,4,1,0,0,0,104,105,5,58,0,
        0,105,6,1,0,0,0,106,107,5,114,0,0,107,108,5,101,0,0,108,109,5,116,
        0,0,109,110,5,117,0,0,110,111,5,114,0,0,111,112,5,110,0,0,112,8,
        1,0,0,0,113,114,5,105,0,0,114,115,5,110,0,0,115,116,5,116,0,0,116,
        10,1,0,0,0,117,118,5,102,0,0,118,119,5,108,0,0,119,120,5,111,0,0,
        120,121,5,97,0,0,121,122,5,116,0,0,122,12,1,0,0,0,123,124,5,98,0,
        0,124,125,5,111,0,0,125,126,5,111,0,0,126,127,5,108,0,0,127,14,1,
        0,0,0,128,129,5,78,0,0,129,130,5,111,0,0,130,131,5,110,0,0,131,132,
        5,101,0,0,132,16,1,0,0,0,133,134,5,98,0,0,134,135,5,114,0,0,135,
        136,5,101,0,0,136,137,5,97,0,0,137,138,5,107,0,0,138,18,1,0,0,0,
        139,140,5,99,0,0,140,141,5,111,0,0,141,142,5,110,0,0,142,143,5,116,
        0,0,143,144,5,105,0,0,144,145,5,110,0,0,145,146,5,117,0,0,146,147,
        5,101,0,0,147,20,1,0,0,0,148,149,5,45,0,0,149,22,1,0,0,0,150,151,
        5,43,0,0,151,24,1,0,0,0,152,153,5,47,0,0,153,26,1,0,0,0,154,155,
        5,42,0,0,155,28,1,0,0,0,156,157,5,37,0,0,157,30,1,0,0,0,158,159,
        5,47,0,0,159,160,5,47,0,0,160,32,1,0,0,0,161,162,5,42,0,0,162,163,
        5,42,0,0,163,34,1,0,0,0,164,165,5,62,0,0,165,36,1,0,0,0,166,167,
        5,60,0,0,167,38,1,0,0,0,168,169,5,60,0,0,169,170,5,61,0,0,170,40,
        1,0,0,0,171,172,5,62,0,0,172,173,5,61,0,0,173,42,1,0,0,0,174,175,
        5,61,0,0,175,176,5,61,0,0,176,44,1,0,0,0,177,178,5,33,0,0,178,179,
        5,61,0,0,179,46,1,0,0,0,180,181,5,97,0,0,181,182,5,110,0,0,182,183,
        5,100,0,0,183,48,1,0,0,0,184,185,5,111,0,0,185,186,5,114,0,0,186,
        50,1,0,0,0,187,188,5,110,0,0,188,189,5,111,0,0,189,190,5,116,0,0,
        190,52,1,0,0,0,191,192,5,44,0,0,192,54,1,0,0,0,193,194,5,61,0,0,
        194,56,1,0,0,0,195,196,5,105,0,0,196,197,5,102,0,0,197,198,5,32,
        0,0,198,199,5,95,0,0,199,200,5,95,0,0,200,201,5,110,0,0,201,202,
        5,97,0,0,202,203,5,109,0,0,203,204,5,101,0,0,204,205,5,95,0,0,205,
        206,5,95,0,0,206,207,5,32,0,0,207,208,5,61,0,0,208,209,5,61,0,0,
        209,210,5,32,0,0,210,211,5,34,0,0,211,212,5,95,0,0,212,213,5,95,
        0,0,213,214,5,109,0,0,214,215,5,97,0,0,215,216,5,105,0,0,216,217,
        5,110,0,0,217,218,5,95,0,0,218,219,5,95,0,0,219,220,5,34,0,0,220,
        221,5,32,0,0,221,222,5,58,0,0,222,58,1,0,0,0,223,224,5,105,0,0,224,
        225,5,102,0,0,225,60,1,0,0,0,226,227,5,101,0,0,227,228,5,108,0,0,
        228,229,5,105,0,0,229,230,5,102,0,0,230,62,1,0,0,0,231,232,5,101,
        0,0,232,233,5,108,0,0,233,234,5,115,0,0,234,235,5,101,0,0,235,64,
        1,0,0,0,236,237,5,119,0,0,237,238,5,104,0,0,238,239,5,105,0,0,239,
        240,5,108,0,0,240,241,5,101,0,0,241,66,1,0,0,0,242,243,5,100,0,0,
        243,244,5,101,0,0,244,304,5,102,0,0,245,246,5,105,0,0,246,304,5,
        102,0,0,247,248,5,101,0,0,248,249,5,108,0,0,249,250,5,105,0,0,250,
        304,5,102,0,0,251,252,5,101,0,0,252,253,5,108,0,0,253,254,5,115,
        0,0,254,304,5,101,0,0,255,256,5,97,0,0,256,257,5,110,0,0,257,304,
        5,100,0,0,258,259,5,111,0,0,259,304,5,114,0,0,260,261,5,110,0,0,
        261,262,5,111,0,0,262,304,5,116,0,0,263,264,5,119,0,0,264,265,5,
        104,0,0,265,266,5,105,0,0,266,267,5,108,0,0,267,304,5,101,0,0,268,
        269,5,99,0,0,269,270,5,111,0,0,270,271,5,110,0,0,271,272,5,116,0,
        0,272,273,5,105,0,0,273,274,5,110,0,0,274,275,5,117,0,0,275,304,
        5,101,0,0,276,277,5,98,0,0,277,278,5,114,0,0,278,279,5,101,0,0,279,
        280,5,97,0,0,280,304,5,107,0,0,281,282,5,105,0,0,282,283,5,110,0,
        0,283,304,5,116,0,0,284,285,5,102,0,0,285,286,5,108,0,0,286,287,
        5,111,0,0,287,288,5,97,0,0,288,304,5,116,0,0,289,290,5,98,0,0,290,
        291,5,111,0,0,291,292,5,111,0,0,292,304,5,108,0,0,293,294,5,78,0,
        0,294,295,5,111,0,0,295,296,5,110,0,0,296,304,5,101,0,0,297,298,
        5,114,0,0,298,299,5,101,0,0,299,300,5,116,0,0,300,301,5,117,0,0,
        301,302,5,114,0,0,302,304,5,110,0,0,303,242,1,0,0,0,303,245,1,0,
        0,0,303,247,1,0,0,0,303,251,1,0,0,0,303,255,1,0,0,0,303,258,1,0,
        0,0,303,260,1,0,0,0,303,263,1,0,0,0,303,268,1,0,0,0,303,276,1,0,
        0,0,303,281,1,0,0,0,303,284,1,0,0,0,303,289,1,0,0,0,303,293,1,0,
        0,0,303,297,1,0,0,0,304,68,1,0,0,0,305,309,5,35,0,0,306,308,8,0,
        0,0,307,306,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,
        0,0,310,312,1,0,0,0,311,309,1,0,0,0,312,313,6,34,0,0,313,70,1,0,
        0,0,314,315,5,84,0,0,315,316,5,114,0,0,316,317,5,117,0,0,317,324,
        5,101,0,0,318,319,5,70,0,0,319,320,5,97,0,0,320,321,5,108,0,0,321,
        322,5,115,0,0,322,324,5,101,0,0,323,314,1,0,0,0,323,318,1,0,0,0,
        324,72,1,0,0,0,325,329,7,1,0,0,326,328,7,2,0,0,327,326,1,0,0,0,328,
        331,1,0,0,0,329,327,1,0,0,0,329,330,1,0,0,0,330,74,1,0,0,0,331,329,
        1,0,0,0,332,333,5,95,0,0,333,334,5,95,0,0,334,335,1,0,0,0,335,336,
        3,73,36,0,336,337,5,95,0,0,337,338,5,95,0,0,338,76,1,0,0,0,339,341,
        7,3,0,0,340,339,1,0,0,0,341,342,1,0,0,0,342,340,1,0,0,0,342,343,
        1,0,0,0,343,78,1,0,0,0,344,346,7,3,0,0,345,344,1,0,0,0,346,347,1,
        0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,351,5,
        46,0,0,350,352,7,3,0,0,351,350,1,0,0,0,352,353,1,0,0,0,353,351,1,
        0,0,0,353,354,1,0,0,0,354,80,1,0,0,0,355,356,7,4,0,0,356,82,1,0,
        0,0,357,358,5,40,0,0,358,359,6,41,1,0,359,84,1,0,0,0,360,361,5,41,
        0,0,361,362,6,42,2,0,362,86,1,0,0,0,363,364,5,91,0,0,364,365,6,43,
        3,0,365,88,1,0,0,0,366,367,5,93,0,0,367,368,6,44,4,0,368,90,1,0,
        0,0,369,371,5,13,0,0,370,369,1,0,0,0,370,371,1,0,0,0,371,372,1,0,
        0,0,372,376,5,10,0,0,373,375,5,32,0,0,374,373,1,0,0,0,375,378,1,
        0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,379,1,0,0,0,378,376,1,
        0,0,0,379,380,4,45,0,0,380,92,1,0,0,0,381,383,7,5,0,0,382,381,1,
        0,0,0,383,384,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,386,1,
        0,0,0,386,387,6,46,0,0,387,94,1,0,0,0,388,390,5,92,0,0,389,391,5,
        13,0,0,390,389,1,0,0,0,390,391,1,0,0,0,391,392,1,0,0,0,392,393,5,
        10,0,0,393,394,1,0,0,0,394,395,6,47,0,0,395,96,1,0,0,0,12,0,303,
        309,323,329,342,347,353,370,376,384,390,5,6,0,0,1,41,0,1,42,1,1,
        43,2,1,44,3
    ]

class LangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    KWD = 34
    COMMENT = 35
    BOOL = 36
    ID = 37
    HID = 38
    INT = 39
    FLOAT = 40
    SYM = 41
    LPAREN = 42
    RPAREN = 43
    LBRACK = 44
    RBRACK = 45
    NEWLINE = 46
    WS = 47
    LINE_ESCAPE = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'def'", "'->'", "':'", "'return'", "'int'", "'float'", "'bool'", 
            "'None'", "'break'", "'continue'", "'-'", "'+'", "'/'", "'*'", 
            "'%'", "'//'", "'**'", "'>'", "'<'", "'<='", "'>='", "'=='", 
            "'!='", "'and'", "'or'", "'not'", "','", "'='", "'if __name__ == \"__main__\" :'", 
            "'if'", "'elif'", "'else'", "'while'", "'('", "')'", "'['", 
            "']'" ]

    symbolicNames = [ "<INVALID>",
            "KWD", "COMMENT", "BOOL", "ID", "HID", "INT", "FLOAT", "SYM", 
            "LPAREN", "RPAREN", "LBRACK", "RBRACK", "NEWLINE", "WS", "LINE_ESCAPE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "KWD", "COMMENT", "BOOL", "ID", "HID", "INT", 
                  "FLOAT", "SYM", "LPAREN", "RPAREN", "LBRACK", "RBRACK", 
                  "NEWLINE", "WS", "LINE_ESCAPE" ]

    grammarFileName = "Lang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None

        
        self.nesting = 0
    class LangDenter(DenterHelper):
        def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
            super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
            self.lexer: LangLexer = lexer

        def pull_token(self):
            return super(LangLexer, self.lexer).nextToken()

    denter = None

    def nextToken(self):
        if not self.denter:
            self.denter = self.LangDenter(self, self.NEWLINE, LangParser.INDENT, LangParser.DEDENT, False)
        return self.denter.next_token()



    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[41] = self.LPAREN_action 
            actions[42] = self.RPAREN_action 
            actions[43] = self.LBRACK_action 
            actions[44] = self.RBRACK_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def LPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.nesting += 1
     

    def RPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.nesting -= 1
     

    def LBRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.nesting += 1
     

    def RBRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.nesting -= 1
     

    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[45] = self.NEWLINE_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return self.nesting==0
         


