# Generated from Lang.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,40,290,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,
        1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
        1,24,1,24,5,24,178,8,24,10,24,12,24,181,9,24,1,24,1,24,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,194,8,25,1,26,1,26,5,26,
        198,8,26,10,26,12,26,201,9,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,28,4,28,211,8,28,11,28,12,28,212,1,29,4,29,216,8,29,11,29,12,29,
        217,1,29,1,29,4,29,222,8,29,11,29,12,29,223,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,3,30,247,8,30,1,31,1,31,1,32,1,32,1,32,1,33,
        1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,3,36,264,8,36,1,36,
        1,36,1,36,1,37,1,37,1,37,1,37,1,37,3,37,274,8,37,1,38,4,38,277,8,
        38,11,38,12,38,278,1,38,1,38,1,39,1,39,3,39,285,8,39,1,39,1,39,1,
        39,1,39,0,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,1,0,6,2,0,10,10,13,
        13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,
        8,0,33,33,37,37,42,43,45,47,58,58,60,62,95,95,124,124,1,0,32,32,
        305,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        1,81,1,0,0,0,3,83,1,0,0,0,5,85,1,0,0,0,7,87,1,0,0,0,9,89,1,0,0,0,
        11,91,1,0,0,0,13,94,1,0,0,0,15,97,1,0,0,0,17,99,1,0,0,0,19,101,1,
        0,0,0,21,104,1,0,0,0,23,107,1,0,0,0,25,110,1,0,0,0,27,113,1,0,0,
        0,29,117,1,0,0,0,31,120,1,0,0,0,33,124,1,0,0,0,35,126,1,0,0,0,37,
        128,1,0,0,0,39,132,1,0,0,0,41,134,1,0,0,0,43,162,1,0,0,0,45,165,
        1,0,0,0,47,170,1,0,0,0,49,175,1,0,0,0,51,193,1,0,0,0,53,195,1,0,
        0,0,55,202,1,0,0,0,57,210,1,0,0,0,59,215,1,0,0,0,61,246,1,0,0,0,
        63,248,1,0,0,0,65,250,1,0,0,0,67,253,1,0,0,0,69,256,1,0,0,0,71,259,
        1,0,0,0,73,263,1,0,0,0,75,273,1,0,0,0,77,276,1,0,0,0,79,282,1,0,
        0,0,81,82,5,45,0,0,82,2,1,0,0,0,83,84,5,43,0,0,84,4,1,0,0,0,85,86,
        5,47,0,0,86,6,1,0,0,0,87,88,5,42,0,0,88,8,1,0,0,0,89,90,5,37,0,0,
        90,10,1,0,0,0,91,92,5,47,0,0,92,93,5,47,0,0,93,12,1,0,0,0,94,95,
        5,42,0,0,95,96,5,42,0,0,96,14,1,0,0,0,97,98,5,62,0,0,98,16,1,0,0,
        0,99,100,5,60,0,0,100,18,1,0,0,0,101,102,5,60,0,0,102,103,5,61,0,
        0,103,20,1,0,0,0,104,105,5,62,0,0,105,106,5,61,0,0,106,22,1,0,0,
        0,107,108,5,61,0,0,108,109,5,61,0,0,109,24,1,0,0,0,110,111,5,33,
        0,0,111,112,5,61,0,0,112,26,1,0,0,0,113,114,5,97,0,0,114,115,5,110,
        0,0,115,116,5,100,0,0,116,28,1,0,0,0,117,118,5,111,0,0,118,119,5,
        114,0,0,119,30,1,0,0,0,120,121,5,110,0,0,121,122,5,111,0,0,122,123,
        5,116,0,0,123,32,1,0,0,0,124,125,5,44,0,0,125,34,1,0,0,0,126,127,
        5,61,0,0,127,36,1,0,0,0,128,129,5,100,0,0,129,130,5,101,0,0,130,
        131,5,102,0,0,131,38,1,0,0,0,132,133,5,58,0,0,133,40,1,0,0,0,134,
        135,5,105,0,0,135,136,5,102,0,0,136,137,5,32,0,0,137,138,5,95,0,
        0,138,139,5,95,0,0,139,140,5,110,0,0,140,141,5,97,0,0,141,142,5,
        109,0,0,142,143,5,101,0,0,143,144,5,95,0,0,144,145,5,95,0,0,145,
        146,5,32,0,0,146,147,5,61,0,0,147,148,5,61,0,0,148,149,5,32,0,0,
        149,150,5,34,0,0,150,151,5,95,0,0,151,152,5,95,0,0,152,153,5,109,
        0,0,153,154,5,97,0,0,154,155,5,105,0,0,155,156,5,110,0,0,156,157,
        5,95,0,0,157,158,5,95,0,0,158,159,5,34,0,0,159,160,5,32,0,0,160,
        161,5,58,0,0,161,42,1,0,0,0,162,163,5,105,0,0,163,164,5,102,0,0,
        164,44,1,0,0,0,165,166,5,101,0,0,166,167,5,108,0,0,167,168,5,105,
        0,0,168,169,5,102,0,0,169,46,1,0,0,0,170,171,5,101,0,0,171,172,5,
        108,0,0,172,173,5,115,0,0,173,174,5,101,0,0,174,48,1,0,0,0,175,179,
        5,35,0,0,176,178,8,0,0,0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,
        1,0,0,0,179,180,1,0,0,0,180,182,1,0,0,0,181,179,1,0,0,0,182,183,
        6,24,0,0,183,50,1,0,0,0,184,185,5,84,0,0,185,186,5,114,0,0,186,187,
        5,117,0,0,187,194,5,101,0,0,188,189,5,70,0,0,189,190,5,97,0,0,190,
        191,5,108,0,0,191,192,5,115,0,0,192,194,5,101,0,0,193,184,1,0,0,
        0,193,188,1,0,0,0,194,52,1,0,0,0,195,199,7,1,0,0,196,198,7,2,0,0,
        197,196,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,
        200,54,1,0,0,0,201,199,1,0,0,0,202,203,5,95,0,0,203,204,5,95,0,0,
        204,205,1,0,0,0,205,206,3,53,26,0,206,207,5,95,0,0,207,208,5,95,
        0,0,208,56,1,0,0,0,209,211,7,3,0,0,210,209,1,0,0,0,211,212,1,0,0,
        0,212,210,1,0,0,0,212,213,1,0,0,0,213,58,1,0,0,0,214,216,7,3,0,0,
        215,214,1,0,0,0,216,217,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,
        218,219,1,0,0,0,219,221,5,46,0,0,220,222,7,3,0,0,221,220,1,0,0,0,
        222,223,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,60,1,0,0,0,225,
        226,5,100,0,0,226,227,5,101,0,0,227,247,5,102,0,0,228,229,5,105,
        0,0,229,247,5,102,0,0,230,231,5,101,0,0,231,232,5,108,0,0,232,233,
        5,105,0,0,233,247,5,102,0,0,234,235,5,101,0,0,235,236,5,108,0,0,
        236,237,5,115,0,0,237,247,5,101,0,0,238,239,5,97,0,0,239,240,5,110,
        0,0,240,247,5,100,0,0,241,242,5,111,0,0,242,247,5,114,0,0,243,244,
        5,110,0,0,244,245,5,111,0,0,245,247,5,116,0,0,246,225,1,0,0,0,246,
        228,1,0,0,0,246,230,1,0,0,0,246,234,1,0,0,0,246,238,1,0,0,0,246,
        241,1,0,0,0,246,243,1,0,0,0,247,62,1,0,0,0,248,249,7,4,0,0,249,64,
        1,0,0,0,250,251,5,40,0,0,251,252,6,32,1,0,252,66,1,0,0,0,253,254,
        5,41,0,0,254,255,6,33,2,0,255,68,1,0,0,0,256,257,5,91,0,0,257,258,
        6,34,3,0,258,70,1,0,0,0,259,260,5,93,0,0,260,261,6,35,4,0,261,72,
        1,0,0,0,262,264,5,13,0,0,263,262,1,0,0,0,263,264,1,0,0,0,264,265,
        1,0,0,0,265,266,5,10,0,0,266,267,4,36,0,0,267,74,1,0,0,0,268,269,
        5,32,0,0,269,270,5,32,0,0,270,271,5,32,0,0,271,274,5,32,0,0,272,
        274,5,9,0,0,273,268,1,0,0,0,273,272,1,0,0,0,274,76,1,0,0,0,275,277,
        7,5,0,0,276,275,1,0,0,0,277,278,1,0,0,0,278,276,1,0,0,0,278,279,
        1,0,0,0,279,280,1,0,0,0,280,281,6,38,0,0,281,78,1,0,0,0,282,284,
        5,92,0,0,283,285,5,13,0,0,284,283,1,0,0,0,284,285,1,0,0,0,285,286,
        1,0,0,0,286,287,5,10,0,0,287,288,1,0,0,0,288,289,6,39,0,0,289,80,
        1,0,0,0,12,0,179,193,199,212,217,223,246,263,273,278,284,5,6,0,0,
        1,32,0,1,33,1,1,34,2,1,35,3
    ]

class LangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    COMMENT = 25
    BOOL = 26
    ID = 27
    HID = 28
    INT = 29
    FLOAT = 30
    KWD = 31
    SYM = 32
    LPAREN = 33
    RPAREN = 34
    LBRACK = 35
    RBRACK = 36
    NEWLINE = 37
    INDENT = 38
    WS = 39
    LINE_ESCAPE = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'-'", "'+'", "'/'", "'*'", "'%'", "'//'", "'**'", "'>'", "'<'", 
            "'<='", "'>='", "'=='", "'!='", "'and'", "'or'", "'not'", "','", 
            "'='", "'def'", "':'", "'if __name__ == \"__main__\" :'", "'if'", 
            "'elif'", "'else'", "'('", "')'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "BOOL", "ID", "HID", "INT", "FLOAT", "KWD", "SYM", 
            "LPAREN", "RPAREN", "LBRACK", "RBRACK", "NEWLINE", "INDENT", 
            "WS", "LINE_ESCAPE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "COMMENT", "BOOL", 
                  "ID", "HID", "INT", "FLOAT", "KWD", "SYM", "LPAREN", "RPAREN", 
                  "LBRACK", "RBRACK", "NEWLINE", "INDENT", "WS", "LINE_ESCAPE" ]

    grammarFileName = "Lang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None

        self.nesting = 0

    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[32] = self.LPAREN_action 
            actions[33] = self.RPAREN_action 
            actions[34] = self.LBRACK_action 
            actions[35] = self.RBRACK_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def LPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.nesting += 1
     

    def RPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.nesting -= 1
     

    def LBRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.nesting += 1
     

    def RBRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.nesting -= 1
     

    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[36] = self.NEWLINE_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return self.nesting==0
         


