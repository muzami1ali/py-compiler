# Generated from Lang.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from LangParser import LangParser


def serializedATN():
    return [
        4,0,44,360,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,1,0,1,0,1,0,1,0,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
        1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,
        1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,23,
        1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,
        1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,
        268,8,29,1,30,1,30,5,30,272,8,30,10,30,12,30,275,9,30,1,30,1,30,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,288,8,31,1,32,
        1,32,5,32,292,8,32,10,32,12,32,295,9,32,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,34,4,34,305,8,34,11,34,12,34,306,1,35,4,35,310,8,35,
        11,35,12,35,311,1,35,1,35,4,35,316,8,35,11,35,12,35,317,1,36,1,36,
        1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,
        3,41,335,8,41,1,41,1,41,5,41,339,8,41,10,41,12,41,342,9,41,1,41,
        1,41,1,42,4,42,347,8,42,11,42,12,42,348,1,42,1,42,1,43,1,43,3,43,
        355,8,43,1,43,1,43,1,43,1,43,0,0,44,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,1,0,6,2,0,10,10,13,13,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,8,0,33,33,37,37,42,43,
        45,47,58,58,60,62,95,95,124,124,1,0,32,32,382,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,0,87,1,0,0,0,1,89,1,0,0,0,3,93,1,0,0,0,5,96,1,0,
        0,0,7,101,1,0,0,0,9,103,1,0,0,0,11,109,1,0,0,0,13,118,1,0,0,0,15,
        120,1,0,0,0,17,122,1,0,0,0,19,124,1,0,0,0,21,126,1,0,0,0,23,128,
        1,0,0,0,25,131,1,0,0,0,27,134,1,0,0,0,29,136,1,0,0,0,31,138,1,0,
        0,0,33,141,1,0,0,0,35,144,1,0,0,0,37,147,1,0,0,0,39,150,1,0,0,0,
        41,154,1,0,0,0,43,157,1,0,0,0,45,161,1,0,0,0,47,163,1,0,0,0,49,165,
        1,0,0,0,51,193,1,0,0,0,53,196,1,0,0,0,55,201,1,0,0,0,57,206,1,0,
        0,0,59,267,1,0,0,0,61,269,1,0,0,0,63,287,1,0,0,0,65,289,1,0,0,0,
        67,296,1,0,0,0,69,304,1,0,0,0,71,309,1,0,0,0,73,319,1,0,0,0,75,321,
        1,0,0,0,77,324,1,0,0,0,79,327,1,0,0,0,81,330,1,0,0,0,83,334,1,0,
        0,0,85,346,1,0,0,0,87,352,1,0,0,0,89,90,5,100,0,0,90,91,5,101,0,
        0,91,92,5,102,0,0,92,2,1,0,0,0,93,94,5,45,0,0,94,95,5,62,0,0,95,
        4,1,0,0,0,96,97,5,78,0,0,97,98,5,111,0,0,98,99,5,110,0,0,99,100,
        5,101,0,0,100,6,1,0,0,0,101,102,5,58,0,0,102,8,1,0,0,0,103,104,5,
        98,0,0,104,105,5,114,0,0,105,106,5,101,0,0,106,107,5,97,0,0,107,
        108,5,107,0,0,108,10,1,0,0,0,109,110,5,99,0,0,110,111,5,111,0,0,
        111,112,5,110,0,0,112,113,5,116,0,0,113,114,5,105,0,0,114,115,5,
        110,0,0,115,116,5,117,0,0,116,117,5,101,0,0,117,12,1,0,0,0,118,119,
        5,45,0,0,119,14,1,0,0,0,120,121,5,43,0,0,121,16,1,0,0,0,122,123,
        5,47,0,0,123,18,1,0,0,0,124,125,5,42,0,0,125,20,1,0,0,0,126,127,
        5,37,0,0,127,22,1,0,0,0,128,129,5,47,0,0,129,130,5,47,0,0,130,24,
        1,0,0,0,131,132,5,42,0,0,132,133,5,42,0,0,133,26,1,0,0,0,134,135,
        5,62,0,0,135,28,1,0,0,0,136,137,5,60,0,0,137,30,1,0,0,0,138,139,
        5,60,0,0,139,140,5,61,0,0,140,32,1,0,0,0,141,142,5,62,0,0,142,143,
        5,61,0,0,143,34,1,0,0,0,144,145,5,61,0,0,145,146,5,61,0,0,146,36,
        1,0,0,0,147,148,5,33,0,0,148,149,5,61,0,0,149,38,1,0,0,0,150,151,
        5,97,0,0,151,152,5,110,0,0,152,153,5,100,0,0,153,40,1,0,0,0,154,
        155,5,111,0,0,155,156,5,114,0,0,156,42,1,0,0,0,157,158,5,110,0,0,
        158,159,5,111,0,0,159,160,5,116,0,0,160,44,1,0,0,0,161,162,5,44,
        0,0,162,46,1,0,0,0,163,164,5,61,0,0,164,48,1,0,0,0,165,166,5,105,
        0,0,166,167,5,102,0,0,167,168,5,32,0,0,168,169,5,95,0,0,169,170,
        5,95,0,0,170,171,5,110,0,0,171,172,5,97,0,0,172,173,5,109,0,0,173,
        174,5,101,0,0,174,175,5,95,0,0,175,176,5,95,0,0,176,177,5,32,0,0,
        177,178,5,61,0,0,178,179,5,61,0,0,179,180,5,32,0,0,180,181,5,34,
        0,0,181,182,5,95,0,0,182,183,5,95,0,0,183,184,5,109,0,0,184,185,
        5,97,0,0,185,186,5,105,0,0,186,187,5,110,0,0,187,188,5,95,0,0,188,
        189,5,95,0,0,189,190,5,34,0,0,190,191,5,32,0,0,191,192,5,58,0,0,
        192,50,1,0,0,0,193,194,5,105,0,0,194,195,5,102,0,0,195,52,1,0,0,
        0,196,197,5,101,0,0,197,198,5,108,0,0,198,199,5,105,0,0,199,200,
        5,102,0,0,200,54,1,0,0,0,201,202,5,101,0,0,202,203,5,108,0,0,203,
        204,5,115,0,0,204,205,5,101,0,0,205,56,1,0,0,0,206,207,5,119,0,0,
        207,208,5,104,0,0,208,209,5,105,0,0,209,210,5,108,0,0,210,211,5,
        101,0,0,211,58,1,0,0,0,212,213,5,100,0,0,213,214,5,101,0,0,214,268,
        5,102,0,0,215,216,5,105,0,0,216,268,5,102,0,0,217,218,5,101,0,0,
        218,219,5,108,0,0,219,220,5,105,0,0,220,268,5,102,0,0,221,222,5,
        101,0,0,222,223,5,108,0,0,223,224,5,115,0,0,224,268,5,101,0,0,225,
        226,5,97,0,0,226,227,5,110,0,0,227,268,5,100,0,0,228,229,5,111,0,
        0,229,268,5,114,0,0,230,231,5,110,0,0,231,232,5,111,0,0,232,268,
        5,116,0,0,233,234,5,119,0,0,234,235,5,104,0,0,235,236,5,105,0,0,
        236,237,5,108,0,0,237,268,5,101,0,0,238,239,5,99,0,0,239,240,5,111,
        0,0,240,241,5,110,0,0,241,242,5,116,0,0,242,243,5,105,0,0,243,244,
        5,110,0,0,244,245,5,117,0,0,245,268,5,101,0,0,246,247,5,98,0,0,247,
        248,5,114,0,0,248,249,5,101,0,0,249,250,5,97,0,0,250,268,5,107,0,
        0,251,252,5,105,0,0,252,253,5,110,0,0,253,268,5,116,0,0,254,255,
        5,102,0,0,255,256,5,108,0,0,256,257,5,111,0,0,257,258,5,97,0,0,258,
        268,5,116,0,0,259,260,5,98,0,0,260,261,5,111,0,0,261,262,5,111,0,
        0,262,268,5,108,0,0,263,264,5,78,0,0,264,265,5,111,0,0,265,266,5,
        110,0,0,266,268,5,101,0,0,267,212,1,0,0,0,267,215,1,0,0,0,267,217,
        1,0,0,0,267,221,1,0,0,0,267,225,1,0,0,0,267,228,1,0,0,0,267,230,
        1,0,0,0,267,233,1,0,0,0,267,238,1,0,0,0,267,246,1,0,0,0,267,251,
        1,0,0,0,267,254,1,0,0,0,267,259,1,0,0,0,267,263,1,0,0,0,268,60,1,
        0,0,0,269,273,5,35,0,0,270,272,8,0,0,0,271,270,1,0,0,0,272,275,1,
        0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,276,1,0,0,0,275,273,1,
        0,0,0,276,277,6,30,0,0,277,62,1,0,0,0,278,279,5,84,0,0,279,280,5,
        114,0,0,280,281,5,117,0,0,281,288,5,101,0,0,282,283,5,70,0,0,283,
        284,5,97,0,0,284,285,5,108,0,0,285,286,5,115,0,0,286,288,5,101,0,
        0,287,278,1,0,0,0,287,282,1,0,0,0,288,64,1,0,0,0,289,293,7,1,0,0,
        290,292,7,2,0,0,291,290,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,
        293,294,1,0,0,0,294,66,1,0,0,0,295,293,1,0,0,0,296,297,5,95,0,0,
        297,298,5,95,0,0,298,299,1,0,0,0,299,300,3,65,32,0,300,301,5,95,
        0,0,301,302,5,95,0,0,302,68,1,0,0,0,303,305,7,3,0,0,304,303,1,0,
        0,0,305,306,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,70,1,0,0,
        0,308,310,7,3,0,0,309,308,1,0,0,0,310,311,1,0,0,0,311,309,1,0,0,
        0,311,312,1,0,0,0,312,313,1,0,0,0,313,315,5,46,0,0,314,316,7,3,0,
        0,315,314,1,0,0,0,316,317,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,
        0,318,72,1,0,0,0,319,320,7,4,0,0,320,74,1,0,0,0,321,322,5,40,0,0,
        322,323,6,37,1,0,323,76,1,0,0,0,324,325,5,41,0,0,325,326,6,38,2,
        0,326,78,1,0,0,0,327,328,5,91,0,0,328,329,6,39,3,0,329,80,1,0,0,
        0,330,331,5,93,0,0,331,332,6,40,4,0,332,82,1,0,0,0,333,335,5,13,
        0,0,334,333,1,0,0,0,334,335,1,0,0,0,335,336,1,0,0,0,336,340,5,10,
        0,0,337,339,5,32,0,0,338,337,1,0,0,0,339,342,1,0,0,0,340,338,1,0,
        0,0,340,341,1,0,0,0,341,343,1,0,0,0,342,340,1,0,0,0,343,344,4,41,
        0,0,344,84,1,0,0,0,345,347,7,5,0,0,346,345,1,0,0,0,347,348,1,0,0,
        0,348,346,1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,350,351,6,42,0,
        0,351,86,1,0,0,0,352,354,5,92,0,0,353,355,5,13,0,0,354,353,1,0,0,
        0,354,355,1,0,0,0,355,356,1,0,0,0,356,357,5,10,0,0,357,358,1,0,0,
        0,358,359,6,43,0,0,359,88,1,0,0,0,12,0,267,273,287,293,306,311,317,
        334,340,348,354,5,6,0,0,1,37,0,1,38,1,1,39,2,1,40,3
    ]

class LangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    KWD = 30
    COMMENT = 31
    BOOL = 32
    ID = 33
    HID = 34
    INT = 35
    FLOAT = 36
    SYM = 37
    LPAREN = 38
    RPAREN = 39
    LBRACK = 40
    RBRACK = 41
    NEWLINE = 42
    WS = 43
    LINE_ESCAPE = 44

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'def'", "'->'", "'None'", "':'", "'break'", "'continue'", "'-'", 
            "'+'", "'/'", "'*'", "'%'", "'//'", "'**'", "'>'", "'<'", "'<='", 
            "'>='", "'=='", "'!='", "'and'", "'or'", "'not'", "','", "'='", 
            "'if __name__ == \"__main__\" :'", "'if'", "'elif'", "'else'", 
            "'while'", "'('", "')'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "KWD", "COMMENT", "BOOL", "ID", "HID", "INT", "FLOAT", "SYM", 
            "LPAREN", "RPAREN", "LBRACK", "RBRACK", "NEWLINE", "WS", "LINE_ESCAPE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "KWD", "COMMENT", "BOOL", "ID", 
                  "HID", "INT", "FLOAT", "SYM", "LPAREN", "RPAREN", "LBRACK", 
                  "RBRACK", "NEWLINE", "WS", "LINE_ESCAPE" ]

    grammarFileName = "Lang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None

        
        self.nesting = 0
    class LangDenter(DenterHelper):
        def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
            super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
            self.lexer: LangLexer = lexer

        def pull_token(self):
            return super(LangLexer, self.lexer).nextToken()

    denter = None

    def nextToken(self):
        if not self.denter:
            self.denter = self.LangDenter(self, self.NEWLINE, LangParser.INDENT, LangParser.DEDENT, False)
        return self.denter.next_token()



    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[37] = self.LPAREN_action 
            actions[38] = self.RPAREN_action 
            actions[39] = self.LBRACK_action 
            actions[40] = self.RBRACK_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def LPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.nesting += 1
     

    def RPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.nesting -= 1
     

    def LBRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.nesting += 1
     

    def RBRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.nesting -= 1
     

    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[41] = self.NEWLINE_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return self.nesting==0
         


