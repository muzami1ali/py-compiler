# Generated from Lang.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from LangParser import LangParser


def serializedATN():
    return [
        4,0,42,332,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
        1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,
        12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,
        16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,
        20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
        22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
        22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,
        25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,240,8,
        27,1,28,1,28,5,28,244,8,28,10,28,12,28,247,9,28,1,28,1,28,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,260,8,29,1,30,1,30,5,
        30,264,8,30,10,30,12,30,267,9,30,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,32,4,32,277,8,32,11,32,12,32,278,1,33,4,33,282,8,33,11,33,12,
        33,283,1,33,1,33,4,33,288,8,33,11,33,12,33,289,1,34,1,34,1,35,1,
        35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,3,39,307,
        8,39,1,39,1,39,5,39,311,8,39,10,39,12,39,314,9,39,1,39,1,39,1,40,
        4,40,319,8,40,11,40,12,40,320,1,40,1,40,1,41,1,41,3,41,327,8,41,
        1,41,1,41,1,41,1,41,0,0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
        42,1,0,6,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,1,0,48,57,8,0,33,33,37,37,42,43,45,47,58,58,60,62,95,
        95,124,124,1,0,32,32,350,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,91,
        1,0,0,0,5,100,1,0,0,0,7,102,1,0,0,0,9,104,1,0,0,0,11,106,1,0,0,0,
        13,108,1,0,0,0,15,110,1,0,0,0,17,113,1,0,0,0,19,116,1,0,0,0,21,118,
        1,0,0,0,23,120,1,0,0,0,25,123,1,0,0,0,27,126,1,0,0,0,29,129,1,0,
        0,0,31,132,1,0,0,0,33,136,1,0,0,0,35,139,1,0,0,0,37,143,1,0,0,0,
        39,145,1,0,0,0,41,147,1,0,0,0,43,151,1,0,0,0,45,153,1,0,0,0,47,181,
        1,0,0,0,49,184,1,0,0,0,51,189,1,0,0,0,53,194,1,0,0,0,55,239,1,0,
        0,0,57,241,1,0,0,0,59,259,1,0,0,0,61,261,1,0,0,0,63,268,1,0,0,0,
        65,276,1,0,0,0,67,281,1,0,0,0,69,291,1,0,0,0,71,293,1,0,0,0,73,296,
        1,0,0,0,75,299,1,0,0,0,77,302,1,0,0,0,79,306,1,0,0,0,81,318,1,0,
        0,0,83,324,1,0,0,0,85,86,5,98,0,0,86,87,5,114,0,0,87,88,5,101,0,
        0,88,89,5,97,0,0,89,90,5,107,0,0,90,2,1,0,0,0,91,92,5,99,0,0,92,
        93,5,111,0,0,93,94,5,110,0,0,94,95,5,116,0,0,95,96,5,105,0,0,96,
        97,5,110,0,0,97,98,5,117,0,0,98,99,5,101,0,0,99,4,1,0,0,0,100,101,
        5,45,0,0,101,6,1,0,0,0,102,103,5,43,0,0,103,8,1,0,0,0,104,105,5,
        47,0,0,105,10,1,0,0,0,106,107,5,42,0,0,107,12,1,0,0,0,108,109,5,
        37,0,0,109,14,1,0,0,0,110,111,5,47,0,0,111,112,5,47,0,0,112,16,1,
        0,0,0,113,114,5,42,0,0,114,115,5,42,0,0,115,18,1,0,0,0,116,117,5,
        62,0,0,117,20,1,0,0,0,118,119,5,60,0,0,119,22,1,0,0,0,120,121,5,
        60,0,0,121,122,5,61,0,0,122,24,1,0,0,0,123,124,5,62,0,0,124,125,
        5,61,0,0,125,26,1,0,0,0,126,127,5,61,0,0,127,128,5,61,0,0,128,28,
        1,0,0,0,129,130,5,33,0,0,130,131,5,61,0,0,131,30,1,0,0,0,132,133,
        5,97,0,0,133,134,5,110,0,0,134,135,5,100,0,0,135,32,1,0,0,0,136,
        137,5,111,0,0,137,138,5,114,0,0,138,34,1,0,0,0,139,140,5,110,0,0,
        140,141,5,111,0,0,141,142,5,116,0,0,142,36,1,0,0,0,143,144,5,44,
        0,0,144,38,1,0,0,0,145,146,5,61,0,0,146,40,1,0,0,0,147,148,5,100,
        0,0,148,149,5,101,0,0,149,150,5,102,0,0,150,42,1,0,0,0,151,152,5,
        58,0,0,152,44,1,0,0,0,153,154,5,105,0,0,154,155,5,102,0,0,155,156,
        5,32,0,0,156,157,5,95,0,0,157,158,5,95,0,0,158,159,5,110,0,0,159,
        160,5,97,0,0,160,161,5,109,0,0,161,162,5,101,0,0,162,163,5,95,0,
        0,163,164,5,95,0,0,164,165,5,32,0,0,165,166,5,61,0,0,166,167,5,61,
        0,0,167,168,5,32,0,0,168,169,5,34,0,0,169,170,5,95,0,0,170,171,5,
        95,0,0,171,172,5,109,0,0,172,173,5,97,0,0,173,174,5,105,0,0,174,
        175,5,110,0,0,175,176,5,95,0,0,176,177,5,95,0,0,177,178,5,34,0,0,
        178,179,5,32,0,0,179,180,5,58,0,0,180,46,1,0,0,0,181,182,5,105,0,
        0,182,183,5,102,0,0,183,48,1,0,0,0,184,185,5,101,0,0,185,186,5,108,
        0,0,186,187,5,105,0,0,187,188,5,102,0,0,188,50,1,0,0,0,189,190,5,
        101,0,0,190,191,5,108,0,0,191,192,5,115,0,0,192,193,5,101,0,0,193,
        52,1,0,0,0,194,195,5,119,0,0,195,196,5,104,0,0,196,197,5,105,0,0,
        197,198,5,108,0,0,198,199,5,101,0,0,199,54,1,0,0,0,200,201,5,100,
        0,0,201,202,5,101,0,0,202,240,5,102,0,0,203,204,5,105,0,0,204,240,
        5,102,0,0,205,206,5,101,0,0,206,207,5,108,0,0,207,208,5,105,0,0,
        208,240,5,102,0,0,209,210,5,101,0,0,210,211,5,108,0,0,211,212,5,
        115,0,0,212,240,5,101,0,0,213,214,5,97,0,0,214,215,5,110,0,0,215,
        240,5,100,0,0,216,217,5,111,0,0,217,240,5,114,0,0,218,219,5,110,
        0,0,219,220,5,111,0,0,220,240,5,116,0,0,221,222,5,119,0,0,222,223,
        5,104,0,0,223,224,5,105,0,0,224,225,5,108,0,0,225,240,5,101,0,0,
        226,227,5,99,0,0,227,228,5,111,0,0,228,229,5,110,0,0,229,230,5,116,
        0,0,230,231,5,105,0,0,231,232,5,110,0,0,232,233,5,117,0,0,233,240,
        5,101,0,0,234,235,5,98,0,0,235,236,5,114,0,0,236,237,5,101,0,0,237,
        238,5,97,0,0,238,240,5,107,0,0,239,200,1,0,0,0,239,203,1,0,0,0,239,
        205,1,0,0,0,239,209,1,0,0,0,239,213,1,0,0,0,239,216,1,0,0,0,239,
        218,1,0,0,0,239,221,1,0,0,0,239,226,1,0,0,0,239,234,1,0,0,0,240,
        56,1,0,0,0,241,245,5,35,0,0,242,244,8,0,0,0,243,242,1,0,0,0,244,
        247,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,
        245,1,0,0,0,248,249,6,28,0,0,249,58,1,0,0,0,250,251,5,84,0,0,251,
        252,5,114,0,0,252,253,5,117,0,0,253,260,5,101,0,0,254,255,5,70,0,
        0,255,256,5,97,0,0,256,257,5,108,0,0,257,258,5,115,0,0,258,260,5,
        101,0,0,259,250,1,0,0,0,259,254,1,0,0,0,260,60,1,0,0,0,261,265,7,
        1,0,0,262,264,7,2,0,0,263,262,1,0,0,0,264,267,1,0,0,0,265,263,1,
        0,0,0,265,266,1,0,0,0,266,62,1,0,0,0,267,265,1,0,0,0,268,269,5,95,
        0,0,269,270,5,95,0,0,270,271,1,0,0,0,271,272,3,61,30,0,272,273,5,
        95,0,0,273,274,5,95,0,0,274,64,1,0,0,0,275,277,7,3,0,0,276,275,1,
        0,0,0,277,278,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,66,1,0,
        0,0,280,282,7,3,0,0,281,280,1,0,0,0,282,283,1,0,0,0,283,281,1,0,
        0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,287,5,46,0,0,286,288,7,3,
        0,0,287,286,1,0,0,0,288,289,1,0,0,0,289,287,1,0,0,0,289,290,1,0,
        0,0,290,68,1,0,0,0,291,292,7,4,0,0,292,70,1,0,0,0,293,294,5,40,0,
        0,294,295,6,35,1,0,295,72,1,0,0,0,296,297,5,41,0,0,297,298,6,36,
        2,0,298,74,1,0,0,0,299,300,5,91,0,0,300,301,6,37,3,0,301,76,1,0,
        0,0,302,303,5,93,0,0,303,304,6,38,4,0,304,78,1,0,0,0,305,307,5,13,
        0,0,306,305,1,0,0,0,306,307,1,0,0,0,307,308,1,0,0,0,308,312,5,10,
        0,0,309,311,5,32,0,0,310,309,1,0,0,0,311,314,1,0,0,0,312,310,1,0,
        0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,312,1,0,0,0,315,316,4,39,
        0,0,316,80,1,0,0,0,317,319,7,5,0,0,318,317,1,0,0,0,319,320,1,0,0,
        0,320,318,1,0,0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,323,6,40,0,
        0,323,82,1,0,0,0,324,326,5,92,0,0,325,327,5,13,0,0,326,325,1,0,0,
        0,326,327,1,0,0,0,327,328,1,0,0,0,328,329,5,10,0,0,329,330,1,0,0,
        0,330,331,6,41,0,0,331,84,1,0,0,0,12,0,239,245,259,265,278,283,289,
        306,312,320,326,5,6,0,0,1,35,0,1,36,1,1,37,2,1,38,3
    ]

class LangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    KWD = 28
    COMMENT = 29
    BOOL = 30
    ID = 31
    HID = 32
    INT = 33
    FLOAT = 34
    SYM = 35
    LPAREN = 36
    RPAREN = 37
    LBRACK = 38
    RBRACK = 39
    NEWLINE = 40
    WS = 41
    LINE_ESCAPE = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'break'", "'continue'", "'-'", "'+'", "'/'", "'*'", "'%'", 
            "'//'", "'**'", "'>'", "'<'", "'<='", "'>='", "'=='", "'!='", 
            "'and'", "'or'", "'not'", "','", "'='", "'def'", "':'", "'if __name__ == \"__main__\" :'", 
            "'if'", "'elif'", "'else'", "'while'", "'('", "')'", "'['", 
            "']'" ]

    symbolicNames = [ "<INVALID>",
            "KWD", "COMMENT", "BOOL", "ID", "HID", "INT", "FLOAT", "SYM", 
            "LPAREN", "RPAREN", "LBRACK", "RBRACK", "NEWLINE", "WS", "LINE_ESCAPE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "KWD", "COMMENT", "BOOL", "ID", "HID", "INT", 
                  "FLOAT", "SYM", "LPAREN", "RPAREN", "LBRACK", "RBRACK", 
                  "NEWLINE", "WS", "LINE_ESCAPE" ]

    grammarFileName = "Lang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None

        
        self.nesting = 0
    class LangDenter(DenterHelper):
        def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
            super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
            self.lexer: LangLexer = lexer

        def pull_token(self):
            return super(LangLexer, self.lexer).nextToken()

    denter = None

    def nextToken(self):
        if not self.denter:
            self.denter = self.LangDenter(self, self.NEWLINE, LangParser.INDENT, LangParser.DEDENT, False)
        return self.denter.next_token()



    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[35] = self.LPAREN_action 
            actions[36] = self.RPAREN_action 
            actions[37] = self.LBRACK_action 
            actions[38] = self.RBRACK_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def LPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.nesting += 1
     

    def RPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.nesting -= 1
     

    def LBRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.nesting += 1
     

    def RBRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.nesting -= 1
     

    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[39] = self.NEWLINE_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return self.nesting==0
         


