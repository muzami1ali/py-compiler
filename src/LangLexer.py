# Generated from Lang.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from LangParser import LangParser


def serializedATN():
    return [
        4,0,39,287,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,
        7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,
        1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
        1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,
        5,24,176,8,24,10,24,12,24,179,9,24,1,24,1,24,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,3,25,192,8,25,1,26,1,26,5,26,196,8,26,10,
        26,12,26,199,9,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,4,28,209,
        8,28,11,28,12,28,210,1,29,4,29,214,8,29,11,29,12,29,215,1,29,1,29,
        4,29,220,8,29,11,29,12,29,221,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,3,30,245,8,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,
        1,34,1,34,1,35,1,35,1,35,1,36,3,36,262,8,36,1,36,1,36,5,36,266,8,
        36,10,36,12,36,269,9,36,1,36,1,36,1,37,4,37,274,8,37,11,37,12,37,
        275,1,37,1,37,1,38,1,38,3,38,282,8,38,1,38,1,38,1,38,1,38,0,0,39,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,1,0,6,2,0,10,10,13,13,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,8,0,33,33,37,37,42,43,
        45,47,58,58,60,62,95,95,124,124,1,0,32,32,302,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,81,1,0,0,0,5,83,1,0,
        0,0,7,85,1,0,0,0,9,87,1,0,0,0,11,89,1,0,0,0,13,92,1,0,0,0,15,95,
        1,0,0,0,17,97,1,0,0,0,19,99,1,0,0,0,21,102,1,0,0,0,23,105,1,0,0,
        0,25,108,1,0,0,0,27,111,1,0,0,0,29,115,1,0,0,0,31,118,1,0,0,0,33,
        122,1,0,0,0,35,124,1,0,0,0,37,126,1,0,0,0,39,130,1,0,0,0,41,132,
        1,0,0,0,43,160,1,0,0,0,45,163,1,0,0,0,47,168,1,0,0,0,49,173,1,0,
        0,0,51,191,1,0,0,0,53,193,1,0,0,0,55,200,1,0,0,0,57,208,1,0,0,0,
        59,213,1,0,0,0,61,244,1,0,0,0,63,246,1,0,0,0,65,248,1,0,0,0,67,251,
        1,0,0,0,69,254,1,0,0,0,71,257,1,0,0,0,73,261,1,0,0,0,75,273,1,0,
        0,0,77,279,1,0,0,0,79,80,5,45,0,0,80,2,1,0,0,0,81,82,5,43,0,0,82,
        4,1,0,0,0,83,84,5,47,0,0,84,6,1,0,0,0,85,86,5,42,0,0,86,8,1,0,0,
        0,87,88,5,37,0,0,88,10,1,0,0,0,89,90,5,47,0,0,90,91,5,47,0,0,91,
        12,1,0,0,0,92,93,5,42,0,0,93,94,5,42,0,0,94,14,1,0,0,0,95,96,5,62,
        0,0,96,16,1,0,0,0,97,98,5,60,0,0,98,18,1,0,0,0,99,100,5,60,0,0,100,
        101,5,61,0,0,101,20,1,0,0,0,102,103,5,62,0,0,103,104,5,61,0,0,104,
        22,1,0,0,0,105,106,5,61,0,0,106,107,5,61,0,0,107,24,1,0,0,0,108,
        109,5,33,0,0,109,110,5,61,0,0,110,26,1,0,0,0,111,112,5,97,0,0,112,
        113,5,110,0,0,113,114,5,100,0,0,114,28,1,0,0,0,115,116,5,111,0,0,
        116,117,5,114,0,0,117,30,1,0,0,0,118,119,5,110,0,0,119,120,5,111,
        0,0,120,121,5,116,0,0,121,32,1,0,0,0,122,123,5,44,0,0,123,34,1,0,
        0,0,124,125,5,61,0,0,125,36,1,0,0,0,126,127,5,100,0,0,127,128,5,
        101,0,0,128,129,5,102,0,0,129,38,1,0,0,0,130,131,5,58,0,0,131,40,
        1,0,0,0,132,133,5,105,0,0,133,134,5,102,0,0,134,135,5,32,0,0,135,
        136,5,95,0,0,136,137,5,95,0,0,137,138,5,110,0,0,138,139,5,97,0,0,
        139,140,5,109,0,0,140,141,5,101,0,0,141,142,5,95,0,0,142,143,5,95,
        0,0,143,144,5,32,0,0,144,145,5,61,0,0,145,146,5,61,0,0,146,147,5,
        32,0,0,147,148,5,34,0,0,148,149,5,95,0,0,149,150,5,95,0,0,150,151,
        5,109,0,0,151,152,5,97,0,0,152,153,5,105,0,0,153,154,5,110,0,0,154,
        155,5,95,0,0,155,156,5,95,0,0,156,157,5,34,0,0,157,158,5,32,0,0,
        158,159,5,58,0,0,159,42,1,0,0,0,160,161,5,105,0,0,161,162,5,102,
        0,0,162,44,1,0,0,0,163,164,5,101,0,0,164,165,5,108,0,0,165,166,5,
        105,0,0,166,167,5,102,0,0,167,46,1,0,0,0,168,169,5,101,0,0,169,170,
        5,108,0,0,170,171,5,115,0,0,171,172,5,101,0,0,172,48,1,0,0,0,173,
        177,5,35,0,0,174,176,8,0,0,0,175,174,1,0,0,0,176,179,1,0,0,0,177,
        175,1,0,0,0,177,178,1,0,0,0,178,180,1,0,0,0,179,177,1,0,0,0,180,
        181,6,24,0,0,181,50,1,0,0,0,182,183,5,84,0,0,183,184,5,114,0,0,184,
        185,5,117,0,0,185,192,5,101,0,0,186,187,5,70,0,0,187,188,5,97,0,
        0,188,189,5,108,0,0,189,190,5,115,0,0,190,192,5,101,0,0,191,182,
        1,0,0,0,191,186,1,0,0,0,192,52,1,0,0,0,193,197,7,1,0,0,194,196,7,
        2,0,0,195,194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,
        0,0,0,198,54,1,0,0,0,199,197,1,0,0,0,200,201,5,95,0,0,201,202,5,
        95,0,0,202,203,1,0,0,0,203,204,3,53,26,0,204,205,5,95,0,0,205,206,
        5,95,0,0,206,56,1,0,0,0,207,209,7,3,0,0,208,207,1,0,0,0,209,210,
        1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,58,1,0,0,0,212,214,7,
        3,0,0,213,212,1,0,0,0,214,215,1,0,0,0,215,213,1,0,0,0,215,216,1,
        0,0,0,216,217,1,0,0,0,217,219,5,46,0,0,218,220,7,3,0,0,219,218,1,
        0,0,0,220,221,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,60,1,0,
        0,0,223,224,5,100,0,0,224,225,5,101,0,0,225,245,5,102,0,0,226,227,
        5,105,0,0,227,245,5,102,0,0,228,229,5,101,0,0,229,230,5,108,0,0,
        230,231,5,105,0,0,231,245,5,102,0,0,232,233,5,101,0,0,233,234,5,
        108,0,0,234,235,5,115,0,0,235,245,5,101,0,0,236,237,5,97,0,0,237,
        238,5,110,0,0,238,245,5,100,0,0,239,240,5,111,0,0,240,245,5,114,
        0,0,241,242,5,110,0,0,242,243,5,111,0,0,243,245,5,116,0,0,244,223,
        1,0,0,0,244,226,1,0,0,0,244,228,1,0,0,0,244,232,1,0,0,0,244,236,
        1,0,0,0,244,239,1,0,0,0,244,241,1,0,0,0,245,62,1,0,0,0,246,247,7,
        4,0,0,247,64,1,0,0,0,248,249,5,40,0,0,249,250,6,32,1,0,250,66,1,
        0,0,0,251,252,5,41,0,0,252,253,6,33,2,0,253,68,1,0,0,0,254,255,5,
        91,0,0,255,256,6,34,3,0,256,70,1,0,0,0,257,258,5,93,0,0,258,259,
        6,35,4,0,259,72,1,0,0,0,260,262,5,13,0,0,261,260,1,0,0,0,261,262,
        1,0,0,0,262,263,1,0,0,0,263,267,5,10,0,0,264,266,5,32,0,0,265,264,
        1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,270,
        1,0,0,0,269,267,1,0,0,0,270,271,4,36,0,0,271,74,1,0,0,0,272,274,
        7,5,0,0,273,272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,
        1,0,0,0,276,277,1,0,0,0,277,278,6,37,0,0,278,76,1,0,0,0,279,281,
        5,92,0,0,280,282,5,13,0,0,281,280,1,0,0,0,281,282,1,0,0,0,282,283,
        1,0,0,0,283,284,5,10,0,0,284,285,1,0,0,0,285,286,6,38,0,0,286,78,
        1,0,0,0,12,0,177,191,197,210,215,221,244,261,267,275,281,5,6,0,0,
        1,32,0,1,33,1,1,34,2,1,35,3
    ]

class LangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    COMMENT = 25
    BOOL = 26
    ID = 27
    HID = 28
    INT = 29
    FLOAT = 30
    KWD = 31
    SYM = 32
    LPAREN = 33
    RPAREN = 34
    LBRACK = 35
    RBRACK = 36
    NEWLINE = 37
    WS = 38
    LINE_ESCAPE = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'-'", "'+'", "'/'", "'*'", "'%'", "'//'", "'**'", "'>'", "'<'", 
            "'<='", "'>='", "'=='", "'!='", "'and'", "'or'", "'not'", "','", 
            "'='", "'def'", "':'", "'if __name__ == \"__main__\" :'", "'if'", 
            "'elif'", "'else'", "'('", "')'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "BOOL", "ID", "HID", "INT", "FLOAT", "KWD", "SYM", 
            "LPAREN", "RPAREN", "LBRACK", "RBRACK", "NEWLINE", "WS", "LINE_ESCAPE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "COMMENT", "BOOL", 
                  "ID", "HID", "INT", "FLOAT", "KWD", "SYM", "LPAREN", "RPAREN", 
                  "LBRACK", "RBRACK", "NEWLINE", "WS", "LINE_ESCAPE" ]

    grammarFileName = "Lang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None

        
        self.nesting = 0
    class LangDenter(DenterHelper):
        def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
            super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
            self.lexer: LangLexer = lexer

        def pull_token(self):
            return super(LangLexer, self.lexer).nextToken()

    denter = None

    def nextToken(self):
        if not self.denter:
            self.denter = self.LangDenter(self, self.NEWLINE, LangParser.INDENT, LangParser.DEDENT, False)
        return self.denter.next_token()



    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[32] = self.LPAREN_action 
            actions[33] = self.RPAREN_action 
            actions[34] = self.LBRACK_action 
            actions[35] = self.RBRACK_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def LPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.nesting += 1
     

    def RPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.nesting -= 1
     

    def LBRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.nesting += 1
     

    def RBRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.nesting -= 1
     

    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[36] = self.NEWLINE_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return self.nesting==0
         


